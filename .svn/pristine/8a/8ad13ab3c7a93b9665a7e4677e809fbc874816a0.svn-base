package com.unirio.ppgi.xstream.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;

import com.unirio.ppgi.xstream.constants.Constant;
import com.unirio.ppgi.xstream.dto.RegistroDTO;
import com.unirio.ppgi.xstream.helper.Helper;
import com.unirio.ppgi.xstream.model.ArtigoPublicado;
import com.unirio.ppgi.xstream.model.ArtigosPublicados;
import com.unirio.ppgi.xstream.model.Curriculo;
import com.unirio.ppgi.xstream.model.DadosComplementares;
import com.unirio.ppgi.xstream.model.DetalhamentoArtigo;
import com.unirio.ppgi.xstream.model.DetalhamentoConcluidas;
import com.unirio.ppgi.xstream.model.DetalhamentoEmAndamento;
import com.unirio.ppgi.xstream.model.DetalhamentoTrabalho;
import com.unirio.ppgi.xstream.model.Entry;
import com.unirio.ppgi.xstream.model.InformacaoAdicionalCurso;
import com.unirio.ppgi.xstream.model.InformacoesAdicionaisCursos;
import com.unirio.ppgi.xstream.model.Linha;
import com.unirio.ppgi.xstream.model.OrientacoesConcluidas;
import com.unirio.ppgi.xstream.model.OrientacoesEmAndamento;
import com.unirio.ppgi.xstream.model.OutraProducao;
import com.unirio.ppgi.xstream.model.OutrasOrientacoesConcluidas;
import com.unirio.ppgi.xstream.model.OutrasOrientacoesEmAndamento;
import com.unirio.ppgi.xstream.model.PartBancaTrabConclusao;
import com.unirio.ppgi.xstream.model.ProducaoBibliografica;
import com.unirio.ppgi.xstream.model.Professor;
import com.unirio.ppgi.xstream.model.Programa;
import com.unirio.ppgi.xstream.model.Programas;
import com.unirio.ppgi.xstream.model.Qualis;
import com.unirio.ppgi.xstream.model.TrabalhoEventos;
import com.unirio.ppgi.xstream.model.TrabalhosEventos;

public class Service {

	private static DateTime inicio;
	private static DateTime fim;
	private static List<RegistroDTO> registros;
	private static RegistroDTO registro;
	private static Curriculo curriculo = new Curriculo();
	private static Qualis qualis = new Qualis();
	private static Programa programa;
	private static Programas programas;
	private static Map<String, String> parametros;
	private static List<InformacaoAdicionalCurso> cursos;

	public static void executaLeituraGravacao(Map<String, String> params) {
		parametros=params;
		inicio = new DateTime();
		System.out.println("Início: " + inicio + "\n");
		registros = obterRegistros();

		gerarArquivoTxt(registros);
	}

	public static List<RegistroDTO> obterRegistros() {
		obterUnMarShalXml();
		return registros;
	}

	public static void obterUnMarShalXml() {
		registros= new ArrayList<RegistroDTO>();
		curriculo = new Curriculo();
		qualis = new Qualis();
		programa = new Programa();
		programas= new Programas();
		cursos= new ArrayList<InformacaoAdicionalCurso>();

		programas=Helper.obtemProgramas();
		System.out.println("Programa informado: "+parametros.get(Constant.PROGRAMA)+"\n");
		if(programas.getPrograma().get(0).getNome().equalsIgnoreCase(parametros.get(Constant.PROGRAMA))){
			Helper.descompactarArquivosZipCurriculo();
			programa = Helper.obtemContents();
			for (Linha linha : programa.getLinha()) {
				for (Professor professor : linha.getProfessor()) {
					registro = new RegistroDTO();
					registro.setNomeLinha(linha.getNome());
					registro.setTotalLinhaPesquisa(linha.getProfessor().size());
					registro.setNomeProfessor(professor.getNome());
					curriculo = Helper.obtemCurriculoVitae(professor.getCodigo());
					qualis = Helper.obtemQualis();
					
					//Obtem artigos publicados em revistas e artigos
					obtemProducaoBibliografica();
					//Orientações Em andamento e participacao em bancas
					obtemOrientacoesEmAndamentoPartBancas();
					//Orientações concluídas
					obtemOrientacoesConcluidas();
					
					registros.add(registro);
				}
			}
			System.out.println("\nIniciando gravação de dados:\n");
			for(RegistroDTO reg:registros){
				System.out.println(reg.toString());
			}
		}else{
			System.out.println("Não existe programa com o nome informado >>"+ parametros.get(Constant.PROGRAMA));
		}

	}

	private static void obtemProducaoBibliografica() {
		for (ProducaoBibliografica prod : curriculo.getProducaoBibliografica()) {
			obtemArtigosPublicados(prod.getArtigosPublicados());
			obtemTrabalhosEventos(prod.getTrabEventos());

		}
	}

	private static void obtemTrabalhosEventos(List<TrabalhosEventos> list) {
		for (TrabalhosEventos trabsevs : list) {
			for (TrabalhoEventos trabsev : trabsevs.getTrabEventos()) {
				for (DetalhamentoTrabalho dt : trabsev.getDetalhamentoTrabalho()) {
					for (Entry e : qualis.getEntry()) {
						if (e.getRegex().equalsIgnoreCase(dt.getNomeEvento().toLowerCase())) {
							switch (e.getClassificacao()) {
							case "A1":
								registro.setNumeroArtigoEmEventosA1(registro.getNumeroArtigoEmEventosA1()+1);
								break;
							case "A2":
								registro.setNumeroArtigoEmEventosA2(registro.getNumeroArtigoEmEventosA2()+1);
								break;
							case "B1":
								registro.setNumeroArtigoEmEventosB1(registro.getNumeroArtigoEmEventosB1()+1);
								break;
							case "B2":
								registro.setNumeroArtigoEmEventosB2(registro.getNumeroArtigoEmEventosB2()+1);
								break;
							case "B3":
								registro.setNumeroArtigoEmEventosB3(registro.getNumeroArtigoEmEventosB3()+1);
								break;
							case "B4":
								registro.setNumeroArtigoEmEventosB4(registro.getNumeroArtigoEmEventosB4()+1);
								break;
							case "C":
								registro.setNumeroArtigoEmEventosC(registro.getNumeroArtigoEmEventosC()+1);
								break;
							case "NC":
								registro.setNumeroArtigoEmEventosNC(registro.getNumeroArtigoEmEventosNC()+1);
								break;
							default:
								System.out.println("Não foi encontrada classificação pro artigo de evento: "+dt.getNomeEvento());
							}
						}
					}
				}
			}
		}
	}

	private static void obtemArtigosPublicados(List<ArtigosPublicados> list) {
		for (ArtigosPublicados arts : list) {
			for (ArtigoPublicado art : arts.getArtigoPublicado()) {
				for (DetalhamentoArtigo da : art.getDetalhamentoArtigo()) {
					for (Entry e : qualis.getEntry()) {
						if (e.getRegex().equalsIgnoreCase(da.getTitulo().toLowerCase())) {
							switch (e.getClassificacao()) {
							case "A1":
								registro.setNumeroArtigoEmRevistaA1(registro.getNumeroArtigoEmRevistaA1()+1);
								break;
							case "A2":
								registro.setNumeroArtigoEmRevistaA2(registro.getNumeroArtigoEmRevistaA2()+1);
								break;
							case "B1":
								registro.setNumeroArtigoEmRevistaB1(registro.getNumeroArtigoEmRevistaB1()+1);
								break;
							case "B2":
								registro.setNumeroArtigoEmRevistaB2(registro.getNumeroArtigoEmRevistaB2()+1);
								break;
							case "B3":
								registro.setNumeroArtigoEmRevistaB3(registro.getNumeroArtigoEmRevistaB3()+1);
								break;
							case "B4":
								registro.setNumeroArtigoEmRevistaB4(registro.getNumeroArtigoEmRevistaB4()+1);
								break;
							case "C":
								registro.setNumeroArtigoEmRevistaC(registro.getNumeroArtigoEmRevistaC()+1);
								break;
							case "NC":
								registro.setNumeroArtigoEmRevistaNC(registro.getNumeroArtigoEmRevistaNC()+1);
								break;
							default:
								System.out.println("Não foi encontrada classificação pro artigo de revista: "+da.getTitulo());
							}
						}
					}
				}
			}
		}
	}

	private static void obtemOrientacoesEmAndamentoPartBancas() {
		for(DadosComplementares dados:curriculo.getDadosComplementares()){
				for(InformacoesAdicionaisCursos info:dados.getInformacoesAdicionaisCursos()){
					cursos=info.getInformacaoAdicionalCurso();
				}
			//	Orientações em andamento
			if(dados.getOrientacoesEmAndamento()!=null){
				for(OrientacoesEmAndamento or:dados.getOrientacoesEmAndamento()){
					//doutorado
					if(or.getOrientacoesEmAndamentoDeDoutorado()!=null){
						registro.setNumeroOrientacoesDoutoradoEmAndamento(or.getOrientacoesEmAndamentoDeDoutorado().size());
					}
					//mestrado
					if(or.getOrientacoesEmAndamentoDeMestrado()!=null){
						registro.setNumeroOrientacoesMestradoEmAndamento(or.getOrientacoesEmAndamentoDeMestrado().size());
					}
					//graduacao
					if(or.getOrientacoesEmAndamentoDeGraduacao()!=null){
						registro.setNumeroOrientacoesGraduacaoEmAndamento(or.getOrientacoesEmAndamentoDeGraduacao().size());
					}
					if(or.getOutrasOrientacoesEmAndamento()!=null){
						for(OutrasOrientacoesEmAndamento anda:or.getOutrasOrientacoesEmAndamento()){
							for(DetalhamentoEmAndamento det:anda.getDetalhamento()){
								for(InformacaoAdicionalCurso info: cursos){
									if(info.getCodigoCurso().equalsIgnoreCase(det.getCodigoCurso())&&info.getNivelCurso().equalsIgnoreCase("GRADUACAO")){
										registro.setNumeroOrientacoesGraduacaoEmAndamento(registro.getNumeroOrientacoesGraduacaoEmAndamento()+1);
									}
								}
							}
						}
					}								
				}
			}
			//	participação em bancas
			obtemParticipacaoBancas(dados.getPartBancaTrabConc());
		}
	}

	private static void obtemOrientacoesConcluidas() {
		for(OutraProducao prod:curriculo.getOutraProd()){
			//	Orientações concluídas
			if(prod.getOrientacoesConcluidas()!=null){
				for(OrientacoesConcluidas or: prod.getOrientacoesConcluidas()){
					//doutorado
					if(or.getOrientacoesConcluidasDeDoutorado()!=null){
						registro.setNumeroOrientacoesDoutoradoConcluidas(or.getOrientacoesConcluidasDeDoutorado().size());
					}
					//mestrado
					if(or.getOrientacoesConcluidasDeMestrado()!=null){
						registro.setNumeroOrientacoesMestradoConcluidas(or.getOrientacoesConcluidasDeMestrado().size());
					}
					//graduacao
					if(or.getOrientacoesConcluidasDeIniciacaoCientifica()!=null){
						registro.setNumeroOrientacoesGraduacaoConcluidas(or.getOrientacoesConcluidasDeIniciacaoCientifica().size());
					}
					if(or.getOutrasOrientacoesConcluidas()!=null){
						for(OutrasOrientacoesConcluidas conc:or.getOutrasOrientacoesConcluidas()){
							for(DetalhamentoConcluidas det:conc.getDetalhamento()){
								for(InformacaoAdicionalCurso info: cursos){
									if(info.getCodigoCurso().equalsIgnoreCase(det.getCodigoCurso())&&info.getNivelCurso().equalsIgnoreCase("GRADUACAO")){
										registro.setNumeroOrientacoesGraduacaoConcluidas(registro.getNumeroOrientacoesGraduacaoConcluidas()+1);
									}
								}
							}
						}
					}
				}
			}
		}
	}

	private static void obtemParticipacaoBancas(List<PartBancaTrabConclusao> parts) {
		if(parts!=null){
			for(PartBancaTrabConclusao part:parts){
				if(part.getPartBancaDoutorado()!=null){
					registro.setNumeroParticipacoesBancasDoutorado(part.getPartBancaDoutorado().size());
				}
				if(part.getPartBancaMestrado()!=null){
					registro.setNumeroParticipacoesBancasMestrado(part.getPartBancaMestrado().size());
				}
				if(part.getPartBancaGraduacao()!=null){
					registro.setNumeroParticipacoesBancasGraduacao(part.getPartBancaGraduacao().size());
				}
			}
		}
	}

	public static void gerarArquivoTxt(List<RegistroDTO> registros) {
		Helper.contadorTempo(inicio, fim);
	}

}
